#pragma kernel Init
#pragma kernel Xorwow

#define ThreadX 1024

struct State
{
    uint X;
    uint Y;
    uint Z;
    uint W;
    uint V;
    uint D;
};

uint _Max;
uint _Seed;
RWBuffer<uint> _Rands;
RWStructuredBuffer<State> _States;

// Single iteration of Bob Jenkins's One-At-A-Time hashing algorithm.
uint BobJenkinsHash(uint x) {
    x += (x << 10u);
    x ^= (x >> 6u);
    x += (x << 3u);
    x ^= (x >> 11u);
    x += (x << 15u);
    return x;
}

[numthreads(ThreadX, 1, 1)]
void Init(uint3 id : SV_DispatchThreadID)
{
    uint idx = id.x;
    if (idx >= _Max)
    {
        return;
    }

    State s;
    s.X = BobJenkinsHash(idx * _Seed ^ idx);
    s.Y = BobJenkinsHash((idx + _Seed) ^ s.X * idx);
    s.Z = BobJenkinsHash(s.X ^ s.Y * idx);
    s.W = BobJenkinsHash(s.Y ^ s.Z * idx);
    s.V = BobJenkinsHash(s.Z ^ s.W * idx);
    s.D = BobJenkinsHash(s.W ^ s.V * idx);

    _States[idx] = s;
}

[numthreads(ThreadX, 1, 1)]
void Xorwow(uint3 id : SV_DispatchThreadID)
{
    uint idx = id.x;
    if (idx >= _Max)
    {
        return;
    }
    
    State state = _States[idx];

    uint t = state.X ^ (state.X >> 2);
    state.X = state.Y;
    state.Y = state.Z;
    state.Z = state.W;
    state.W = state.V;
    state.V = state.V ^ (state.V << 4) ^ t ^ (t << 1);
    state.D += 362437u;
    
    _Rands[idx] = state.D + state.V;
    _States[idx] = state;
}
